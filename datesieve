#!/usr/bin/env python3

# Copyright (c) 2019 Anton Semjonov
# Licensed under the MIT License

from datetime import datetime

# set with formatted dates and capacity to check if desired number of
# entries per timespan is already reached
class bucket:
    def __init__(self, format, capacity):
        self.bucket = set()
        self.capacity = capacity
        self.format = format

    # try to add formatted date to bucket, returns True if there was capacity left
    def add(self, date):
        if self.capacity > 0:
            element = date.strftime(self.format)
            if element not in self.bucket:
                self.bucket.add(element)
                self.capacity -= 1
                return True
        return False

# simple counter bucket with almost the same interface
class counterbucket:
    def __init__(self, capacity):
        self.capacity = capacity

    def add(self, any):
        if self.capacity > 0:
            self.capacity -= 1
            return True
        return False

# sieve a number of dates with timespan buckets
class sieve:

    # initialize a sieve with timespan buckets with given capacities
    def __init__(self, minimum=0, minutes=0, hours=0, days=0, weeks=0, months=0, years=0, **ignoredargs):
        self.buckets = [
            counterbucket(minimum),
            bucket("%Y%m%d%H%M", minutes),
            bucket("%Y%m%d%H", hours),
            bucket("%Y%m%d", days),
            bucket("%Y%W", weeks),
            bucket("%Y%m", months),
            bucket("%Y", years),
        ]

    # try to add a date, returns True if there was capacity in any bucket, False if sieved out
    def add(self, date):
        return True in [b.add(date) for b in self.buckets]

    # all-in-one to directly sieve a list of elements and return result
    @staticmethod
    def sieve(elements, key=lambda e: e, inclusive=True, minimum=0, minutes=0, hours=0, days=0, weeks=0, months=0, years=0, **ignoredargs):

        # init sieve
        s = sieve(minimum, minutes, hours, days, weeks, months, years)

        # copy and sort elements
        elements = list(elements)
        elements.sort(key=key, reverse=True)

        # return a list of sieved elements, which fit in the timespans
        return [el for el in elements if s.add(key(el)) is inclusive]

# =============================================================================================

# line-based pipe operation when called interactively
if __name__ == "__main__":

    import argparse
    import sys

    parser = argparse.ArgumentParser()

    buckets = parser.add_argument_group('timespan buckets')
    buckets.add_argument('--minimum', help='minimum number to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--minutes', help='number of minutes to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--hours', help='number of hours to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--days', help='number of days to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--weeks', help='number of weeks to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--months', help='number of months to keep', type=int, metavar='int', default=0)
    buckets.add_argument('--years', help='number of years to keep', type=int, metavar='int', default=0)

    parser.add_argument('--strptime', help='format to parse date, otherwise fuzzy with dateutil', metavar='format')
    parser.add_argument('--resub', help='apply regular expression substitution before parsing', nargs=2, metavar=('pat', 'repl'))
    parser.add_argument('--sort', help='read all lines and sort by date first', action='store_true')
    parser.add_argument('--inclusive', help='show included elements instead of sieved-out ones', action='store_true')

    args = parser.parse_args()

    # set dateparser depending on whether a specific strptime format string was given or not
    if args.strptime is None:
        import dateutil.parser
        parse = lambda s: dateutil.parser.parse(s, fuzzy=True)
    elif args.strptime == '%s':
        # special case for unix epoch
        parse = lambda s: datetime.fromtimestamp(int(s))
    else:
        parse = lambda s: datetime.strptime(s, args.strptime)

    # compile substitution pattern ahead of time if given
    if args.resub:
        import re
        pattern = re.compile(args.resub[0])

    # instantiated class to hold original line and parsed date
    class dateline:
        def __init__(self, line):

            # strip trailing newline and save original line
            line = self.line = line.rstrip('\n')

            # apply substitution before attempting to parse
            if args.resub:
                line = pattern.sub(args.resub[1], line)

            # try to parse line for date
            try:
                self.date = parse(line)
            except ValueError as e:
                print(str(e), file=sys.stderr)
                print("couldn't parse date, try specifying format with --strptime or applying a substitution with --resub", file=sys.stderr)
                sys.exit(1)

    # whether to read all lines and sort or use piped line-by-line operation
    if args.sort:

        inlist = [dateline(line) for line in sys.stdin]
        for s in sieve.sieve(inlist, lambda e: e.date, **vars(args)):
            print(s.line)

    else:

        s = sieve(**vars(args))
        for line in sys.stdin:
            el = dateline(line)
            if s.add(el.date) is args.inclusive:
                print(el.line)
